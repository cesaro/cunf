= Overview =

Cunf is a tool for constructing the unfolding of a contextual net, that is, a
Petri net extended with read arcs.

If you are not familiar with
[http://en.wikipedia.org/wiki/Petri_net Petri nets],
you could perhaps start with (6).
Contextual nets, abbreviated c-nets, are Petri where in addition to normal
_arrows_ you can use _read arcs_.  These allow transitions to verify that
tokens exist in a place before firing the transition, but don't consume them
when firing.  See Section 2 of (3) for a formalization.

The unfolding of a Petri net can perhaps be best understood as a compact
representation of the state-space (the reachable markings) of the net.  This
representation is suitable for checking properties of the net, like
reachability or deadlock freedom.  Checking this directly on net is
computationally difficult (PSPACE-complete).  Building the unfolding is, let me
say it, relatively easier (see below); and checking this properties using the
unfolding is also 'easy' (only NP-complete).  Together, building the unfolding
and checking properties of the net using the unfolding is almost always faster
than attempting to build the reachability graph and checking those properties
on it.  Notice, also, that once the unfolding is built, we can use it to check
as many properties as we want.

As a general rule, the more concurrency one finds in a Petri net, the more
compact its unfolding is with respect to the reachability graph.  While this is
still true for the unfolding of a c-net, additional properties make c-net
unfoldings interesting: they can be exponentially more compact for certain
interesting classes of c-nets.  The reader is referred to (7) for more
details.

The unfolding, at any rate, when constructed with an _adequate order_, can be
as big as the state-space of the net.  Furthermore, recall that unfoldings are
built in an incremental fashion, adding one event at at time.  Computing those
_extensions_ requires solving a variant of the coverability problem within the
currently consutrcted prefix, and this is an NP-complete problem.

= Underlaying Theory and File Formats =

The tool implements the unfolding procedure proposed by Baldan et al. in (1).
The algorithms and data structures actually implemented have been partially
described in (3) and (7).  While the theoretical results of (1,3,7) allow for
unfolding bounded c-nets in general, Cunf can only unfold 1-safe c-nets, and
the tool will blindly assume the input is a 1-safe c-net.  In (2), and old and
inefficient version of the tool is described.

Cunf accepts as input a c-net represented in a modified version of the PEP's
low level (ll_net) format -- see 
[http://code.google.com/p/cunf/downloads/detail?name=manual.pdf Cunf user manual]
for details on the modification.  The output is a file in
[http://code.google.com/p/cunf/source/browse/src/output.c#263 CUF format]
storing the contextual unfolding of the net.  The tool can also directly output
a [http://www.graphviz.org/ Graphviz] script representing the unfolding.
You can also produce a Graphviz script from a CUF file using provided
[http://code.google.com/p/cunf/source/browse/tools/ scripts].

= Unfolding-based Deadlock checking =

The [http://code.google.com/p/cunf/source/browse/tools/cna Contextual Net Analyser]
(_cna_) checks place coverability or deadlock-freedom of a c-net by examining
its unfolding.  The tool reduces these problems to the satisfiability of a
propositional formula that it generates out of the unfolding.  It uses
[http://minisat.se/ Minisat] as a back-end to solve the formula, so you will
need a working installation of this solver to run the tool.  Execute _cna_
without arguments to get help about the command-line syntax.  See (5) for a
detailed description of the operation it performs.

= Downloads =

 * The Cunf tool [http://code.google.com/p/cunf/downloads/detail?name=manual.pdf user manual].
 * Precompiled binary of [http://code.google.com/p/cunf/downloads/detail?name=cunf-v1.5_linux_x86-64 Cunf v1.5 for Linux x86-64 (64 bit)].
 * Precompiled binary of [http://code.google.com/p/cunf/downloads/detail?name=cunf-v1.5_linux_i386 Cunf v1.5 for Linux i386 (32 bit)].
 * Precompiled binary of [http://code.google.com/p/cunf/downloads/detail?name=cunf-v1.5_macos_x86-64 Cunf v1.5 for Mac OSX x86-64 (64 bit)].
 * Precompiled binary of [http://code.google.com/p/cunf/downloads/detail?name=cunf-v1.4_x86-64 Cunf v1.4 for Linux x86-64] (also referred as _revision 55_).

You can additionally
[https://code.google.com/p/cunf/source/browse/ browse the source code]
online. Or get a copy of it and start hacking, type in your terminal:

{{{
git clone https://code.google.com/p/cunf/
}}}

= See also =

 * Stefan Schwoon's [http://www.lsv.ens-cachan.fr/~schwoon/tools/mole/ Mole] unfolder.
 * Victor Khomenko's [http://homepages.cs.ncl.ac.uk/victor.khomenko/tools/tools.html Punf] unfolder.
 * The [http://theoretica.informatik.uni-oldenburg.de/~pep/ PEP] homepage.

= References =

 * (1) Paolo Baldan, Andrea Corradini, Barbara König, and Stefan Schwoon.  [http://dx.doi.org/10.1007/978-3-540-89287-8_12 McMillan's Complete Prefix for Contextual Nets].  In Transactions on Petri Nets and Other Models of Concurrency I, pages 199-220, 2008.  Springer-Verlag.

 * (2) César Rodríguez.  [http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/cr-m2.pdf Implementation of a complete prefix unfolder for contextual nets].  Rapport de Master, Master Parisien de Recherche en Informatique, Paris, France, September 2010.

 * (3) César Rodríguez, Stefan Schwoon, and Paolo Baldan.  [http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/RSB-concur11.pdf Efficient contextual unfolding].  In Proc. of CONCUR'11, volume 6901 of LNCS.  Springer, 2011.

 * (4) César Rodríguez, Stefan Schwoon, and Paolo Baldan [http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/rr-lsv-2011-14.pdf Efficient contextual unfolding].  Research Report LSV-11-14, Laboratoire de Spécification et Vérification, ENS Cachan, France, June 2011

 * (5) César Rodríguez and Stefan Schwoon.  [http://www.lsv.ens-cachan.fr/~rodriguez/tools/cunf/rs12.pdf Verification of Petri Nets with Read Arcs].  In Proc. of CONCUR'12. Springer, 2012. To appear.

 * (6) Tadao Murata.  Petri Nets: Properties, Analysis and Applications. In Proc. of the IEEE, vol. 77, no. 4, April 1989

 * (7) Paolo Baldan, Alessandro Bruni, Andrea Corradini, Barbara König, César Rodríguez, and Stefan Schwoon.  [http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/bbckrs-tcs12.pdf Efficient Unfolding of Contextual Petri Nets]. Theoretical Computer Science 449, 2 – 22 (2012)

